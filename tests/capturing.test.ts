import { SGFGoban } from "../src/goban";
import { parseSGF, SGFParser } from "../src/parser";
import { rowColumnToCoordinate, SGFColor, SGFNode, Tag } from "../src/sgf";

// (;GM[1]FF[4]CA[UTF-8]AP[Sabaki:0.52.2]KM[6.5]SZ[13]DT[2022-12-04];B[aa];W[ba];B[ca];W[ab])

describe('capturing stones', () => {
	test('capturing', () => {
		const g = new SGFGoban(5);
		expect( g.playStone(SGFColor.WHITE, rowColumnToCoordinate([3, 3])).length).toBe(0)
		expect( g.playStone(SGFColor.BLACK, rowColumnToCoordinate([3, 2])).length).toBe(0)
		expect( g.playStone(SGFColor.BLACK, rowColumnToCoordinate([3, 4])).length).toBe(0)
		expect( g.playStone(SGFColor.BLACK, rowColumnToCoordinate([2, 3])).length).toBe(0)
		expect(g.debugStr()).toBe(`
.....
.....
...B.
..BWB
.....
`.trim())
		const captured = g.playStone(SGFColor.BLACK, rowColumnToCoordinate([4, 3]));
		expect(JSON.stringify(captured)).toBe('["' + rowColumnToCoordinate([3, 3]) + '"]');
		expect(g.debugStr()).toBe(`
.....
.....
...B.
..B.B
...B.
`.trim())
	})
	test("capturing 2", () => {
		const sgf = "(;GM[1]FF[4]CA[UTF-8]AP[Sabaki:0.52.2]KM[6.5]SZ[13]DT[2022-12-04]AB[fe][ff][fg][gg][hg][hf][he][ge]AW[ed][fd][gd][hd][id][ie][if][ig][ih][hh][fh][gh][eh][eg][ef][ee]PL[W];W[gf])";
		const node = new SGFParser(sgf).parse();
		console.log(JSON.stringify(node))
		const goban = new SGFGoban(parseInt(node?.getProperty(Tag.Size) as string));
		expect(goban.size).toBe(13);

		goban.applyNodes(node as SGFNode);
		expect(goban.debugStr()).toBe(`
.............
.............
.............
....WWWWW....
....WBBBW....
....WB.BW....
....WBBBW....
....WWWWW....
.............
.............
.............
.............
.............
`.trim())

		goban.applyNodes((node as SGFNode).children[0]);
		expect(goban.debugStr()).toBe(`
.............
.............
.............
....WWWWW....
....W...W....
....W.W.W....
....W...W....
....WWWWW....
.............
.............
.............
.............
.............
`.trim())
	})
	test("capturing 3", () => {
		const sgf = "(;GM[1]FF[4]CA[UTF-8]AP[Sabaki:0.52.2]KM[6.5]SZ[13]DT[2022-12-04]AW[gd][fe][gf][he]AB[ff][gg][hf][ie][hd][gc][fd][ee]AE[ge];B[ge])";
		const node = new SGFParser(sgf).parse();
		console.log(JSON.stringify(node))
		const goban = new SGFGoban(parseInt(node?.getProperty(Tag.Size) as string));
		expect(goban.size).toBe(13);

		goban.applyNodes(node as SGFNode);
		expect(goban.debugStr()).toBe(`
.............
.............
......B......
.....BWB.....
....BW.WB....
.....BWB.....
......B......
.............
.............
.............
.............
.............
.............
`.trim())

		goban.applyNodes((node as SGFNode).children[0]);
		expect(goban.debugStr()).toBe(`
.............
.............
......B......
.....B.B.....
....B.B.B....
.....B.B.....
......B......
.............
.............
.............
.............
.............
.............
`.trim())
	})
	test('caputuring with 2 stones', () => {
		const node = parseSGF('(;GM[1]FF[4]CA[UTF-8]AP[Sabaki:0.52.2]KM[6.5]SZ[9]DT[2022-12-08]AB[ee][ef][dd][dc][eb][fc][fd]AE[ed]AW[ec][fe][ff][eg][df][de]PL[W];W[ed])');
		const board = new SGFGoban(node);
		board.applyNodes(node.children[0]);
		expect(board.debugStr()).toBe(`
.........
....B....
...BWB...
...BWB...
...W.W...
...W.W...
....W....
.........
.........
`.trim())
	})
  });